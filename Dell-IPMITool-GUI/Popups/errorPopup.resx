<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAAAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAANcNAADXDQAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADgAA
        AMIAAAD/AAAA/wAAAMAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkAAAArwAA
        AOwAAACzAAAALQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAA9AAAA8AAAAP8AAAD/AAAA7gAAADgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIQAA
        ALkAAAD/AAAA/wAAAP8AAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAIsAAAD/AAAA/wAAAP8AAAD/AAAAggAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ACEAAAC6AAAA/wAAAP8AAAD/AAAA/wAAAO4AAAAAAAAAAAAAAAAAAAAAAAAAAQAAAD0AAAA4AAAABQAA
        AAAAAAAAAAAABgAAADIAAAB8AAAA5AAAAP8AAAD/AAAA/wAAAP8AAADYAAAAWAAAABIAAAAAAAAAAAAA
        AAAAAAAhAAAAugAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAwgAAAAAAAAAAAAAAAAAAAAAAAABRAAAA5QAA
        AOwAAACgAAAAPgAAADcAAACgAAAA6wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADFAAAAIgAA
        AAAAAAAAAAAAIQAAALoAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAM4AAAA4AAAAAAAAAAAAAAAAAAAAPQAA
        AOUAAAD/AAAA/wAAAP8AAADvAAAA6wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAywAA
        AC8AAAAAAAAAAAAAACEAAAC6AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADQAAAANAAAAAAAAAAAAAAAAAAA
        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
        AP8AAAD/AAAA/wAAANgAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOwAAAOEAAAD/AAAA/wAA
        AP4AAADeAAAA2AAAAP0AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/gAA
        AOcAAAD0AAAA/wAAAP8AAAD/AAAA0gAAACYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARAAA
        ANgAAADZAAAAfgAAACQAAAAgAAAAfgAAANcAAAD7AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA+QAA
        ANcAAACGAAAALAAAAEsAAACvAAAA8wAAANUAAAA5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAJwAAACAAAAABAAAAAAAAAAAAAAABAAAAHAAAAFoAAADYAAAA/wAAAP8AAAD/AAAA/wAA
        AMYAAABPAAAAGwAAAAEAAAAAAAAAAAAAAAkAAABCAAAAMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIIAAAD/AAAA/wAA
        AP8AAAD/AAAAaQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAAA
        AO4AAAD/AAAA/wAAAOcAAAAsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAMAAAAwAAAAP8AAAD/AAAAvAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//gf4P/4H8D/+B+A8MAHAPAABgDgAAwB4AAYA+AD8AfwD+AP8DgAH+Bg
        AD/gwABn4MAAxwCAAYABgAGAAYOBgAGHgYABj4GAAP+BAOD/AQfgfgMH4HwGD/A8DA/wD/AP4APAD+AA
        AAfgAAAH8AAAD/jAAx//+B////gf///4H/8=
</value>
  </data>
</root>